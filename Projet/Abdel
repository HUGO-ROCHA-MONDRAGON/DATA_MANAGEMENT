
import numpy as np

import sqlite3
import pandas as pd
import numpy as np

def strategie_portefeuille_montecarlo(
    db_file: str,
    risk_type: str = "LOW_RISK",
    num_simulations: int = 200,
    num_days: int = 7,
    target_volatility: float = 0.10,
    max_budget: float = 5_000_000
):
    # Connexion et r√©cup√©ration des tickers et quantit√©s existants
    conn = sqlite3.connect(db_file)
    query_portfolio = """
        SELECT TICKER, QUANTITY
        FROM Portfolios
        WHERE RISK_TYPE = ?
    """
    portfolio_df = pd.read_sql_query(query_portfolio, conn, params=(risk_type,))
    
    if portfolio_df.empty:
        return(f"Aucun actif trouv√© pour le profil de risque '{risk_type}'. V√©rifie l'orthographe.")

    tickers = portfolio_df['TICKER'].tolist()
    
    # R√©cup√©rer les prix historiques depuis la table Products
    price_data = {}
    for ticker in tickers:
        query_prices = """
            SELECT IMPORT_DATE, PRICE
            FROM Products
            WHERE TICKER = ?
            ORDER BY IMPORT_DATE ASC
        """
        df = pd.read_sql_query(query_prices, conn, params=(ticker,))
        df['IMPORT_DATE'] = pd.to_datetime(df['IMPORT_DATE'], dayfirst=True)
        df.set_index('IMPORT_DATE', inplace=True)
        price_data[ticker] = df['PRICE']
    conn.close()

    # Cr√©er un DataFrame align√© des prix
    prices_df = pd.concat(price_data.values(), axis=1)
    prices_df.columns = tickers
    prices_df.dropna(inplace=True)

    # Calcul des rendements log
    log_returns = np.log(prices_df / prices_df.shift(1)).dropna()
    mean_returns = log_returns.mean()
    cov_matrix = log_returns.cov()

    # Simuler des portefeuilles
    results = []
    for _ in range(num_simulations):
        weights = np.random.random(len(tickers))
        weights /= np.sum(weights)
        
        # Calcul rendement et volatilit√© du portefeuille simul√©
        port_return = np.sum(mean_returns * weights) * num_days
        port_vol = np.sqrt(np.dot(weights.T, np.dot(cov_matrix * num_days, weights)))

        # R√©cup√©rer le dernier prix spot
        latest_prices = prices_df.iloc[-1].values
        quantites = np.floor((weights * max_budget) / latest_prices)
        total_value = np.sum(quantites * latest_prices)

        if port_vol <= target_volatility and total_value <= max_budget:
            results.append({
                'weights': weights,
                'quantities': quantites.astype(int),
                'volatility': port_vol,
                'expected_return': port_return,
                'total_cost': total_value
            })

    # Choisir le portefeuille optimal : celui avec max return et co√ªt minimal
    if not results:
        return "Aucun portefeuille trouv√© respectant les contraintes."
    
    # Trier par return d√©croissant puis co√ªt croissant
    sorted_results = sorted(results, key=lambda x: (-x['expected_return'], x['total_cost']))
    best_portfolio = sorted_results[0]

    # Retourner les quantit√©s optimales associ√©es aux tickers
    optimal_quantities = dict(zip(tickers, best_portfolio['quantities']))
    optimal_quantities['expected_return'] = best_portfolio['expected_return']
    optimal_quantities['volatility'] = best_portfolio['volatility']
    optimal_quantities['total_cost'] = best_portfolio['total_cost']

    return optimal_quantities

strategie_portefeuille_montecarlo( db_file, "LOW_RISK", 200, 7, 0.10 , 5000000 )
import sqlite3
import pandas as pd
import numpy as np
from datetime import datetime

def strategie_montecarlo_robuste(
    db_file: str,
    risk_type: str = "LOW_RISK",
    num_simulations: int = 200,
    num_days: int = 7,
    target_volatility: float = 0.10
):
    conn = sqlite3.connect(db_file)

    # üîπ R√©cup√©rer automatiquement le MANAGER_ID
    manager_query = """
        SELECT MANAGER_ID FROM Portfolios
        WHERE RISK_TYPE = ? LIMIT 1
    """
    manager_row = pd.read_sql_query(manager_query, conn, params=(risk_type,))
    if manager_row.empty:
        return f"Aucun manager trouv√© pour le portefeuille {risk_type}."
    manager_id = int(manager_row['MANAGER_ID'].iloc[0])

    # üîπ R√©cup√©rer le budget disponible
    cash_query = """
        SELECT QUANTITY FROM Portfolios
        WHERE RISK_TYPE = ? AND TICKER = 'CASH'
    """
    cash_row = pd.read_sql_query(cash_query, conn, params=(risk_type,))
    if cash_row.empty:
        return "Pas de ligne 'CASH' dans le portefeuille."
    max_budget = float(cash_row['QUANTITY'].iloc[0])

    # üîπ R√©cup√©rer les tickers pr√©sents dans le portefeuille
    initial_query = """
        SELECT TICKER, QUANTITY FROM Portfolios
        WHERE RISK_TYPE = ? AND TICKER != 'CASH'
    """
    initial_df = pd.read_sql_query(initial_query, conn, params=(risk_type,))
    portfolio_tickers = initial_df['TICKER'].tolist()

    if not portfolio_tickers:
        return "Aucun actif √† simuler."

    # üîπ R√©cup√©rer les donn√©es de prix
    price_data = {}
    for ticker in portfolio_tickers:
        df = pd.read_sql_query("""
            SELECT IMPORT_DATE, PRICE FROM Products
            WHERE TICKER = ? ORDER BY IMPORT_DATE ASC
        """, conn, params=(ticker,))
        if not df.empty:
            df['IMPORT_DATE'] = pd.to_datetime(df['IMPORT_DATE'], dayfirst=True)
            df.set_index('IMPORT_DATE', inplace=True)
            price_data[ticker] = df['PRICE']

    if not price_data:
        return "Donn√©es de prix manquantes."

    prices_df = pd.concat(price_data.values(), axis=1)
    prices_df.columns = list(price_data.keys())
    prices_df.dropna(inplace=True)

    log_returns = np.log(prices_df / prices_df.shift(1)).dropna()
    mean_returns = log_returns.mean()
    cov_matrix = log_returns.cov()
    latest_prices = prices_df.iloc[-1].values
    tickers = prices_df.columns.tolist()
    nb_assets = len(tickers)

    # üîπ Quantit√©s initiales
    initial_quantities = np.zeros(nb_assets)
    for i, ticker in enumerate(tickers):
        row = initial_df[initial_df['TICKER'] == ticker]
        if not row.empty:
            initial_quantities[i] = float(row['QUANTITY'].iloc[0])
    initial_cost = np.sum(initial_quantities * latest_prices)

    def simulate_gain(q):
        final_values = []
        for _ in range(30):
            future_prices = latest_prices.copy()
            for _ in range(num_days):
                daily_returns = np.random.multivariate_normal(mean_returns, cov_matrix)
                future_prices *= np.exp(daily_returns)
            final_values.append(np.sum(future_prices * q))
        return np.mean(final_values)

    initial_gain = simulate_gain(initial_quantities)
    initial_result = {
        'tickers': tickers,
        'quantities': dict(zip(tickers, initial_quantities.astype(int))),
        'volatility': np.sqrt(np.dot((initial_quantities / np.sum(initial_quantities)).T,
                                     np.dot(cov_matrix * num_days, (initial_quantities / np.sum(initial_quantities))))),
        'expected_return': np.sum(mean_returns * initial_quantities / np.sum(initial_quantities)) * num_days,
        'total_cost': initial_cost,
        'gain_or_loss': initial_gain - initial_cost,
        'performance': 'gain' if initial_gain - initial_cost > 0 else 'loss'
    }

    best_result = initial_result

    for _ in range(num_simulations):
        weights = np.random.random(nb_assets)
        weights /= np.sum(weights)
        candidate_quantities = np.floor((weights * max_budget) / latest_prices)

        # ‚úÖ Contraintes de vente max 1000 et achat max 5000
        diff = candidate_quantities - initial_quantities
        if any(diff < -10000) or any(diff > 150000):
            continue

        port_vol = np.sqrt(np.dot((candidate_quantities / np.sum(candidate_quantities)).T,
                                  np.dot(cov_matrix * num_days, (candidate_quantities / np.sum(candidate_quantities)))))
        total_cost = np.sum(candidate_quantities * latest_prices)

        if port_vol <= target_volatility and total_cost <= max_budget:
            future_value = simulate_gain(candidate_quantities)
            gain_or_loss = future_value - total_cost

            if gain_or_loss > best_result['gain_or_loss']:
                best_result = {
                    'tickers': tickers,
                    'quantities': dict(zip(tickers, candidate_quantities.astype(int))),
                    'volatility': port_vol,
                    'expected_return': np.sum(mean_returns * candidate_quantities / np.sum(candidate_quantities)) * num_days,
                    'total_cost': total_cost,
                    'gain_or_loss': gain_or_loss,
                    'performance': 'gain' if gain_or_loss > 0 else 'loss'
                }

    # ‚úÖ Si aucune strat√©gie trouv√©e, on conserve le portefeuille actuel
    if best_result == initial_result:
        conn.close()
        return "‚ö†Ô∏è Aucune strat√©gie optimale trouv√©e. Portefeuille conserv√©."

    # üîπ Mise √† jour Portfolios & Deals
    cursor = conn.cursor()
    cursor.execute("DELETE FROM Portfolios WHERE RISK_TYPE = ?", (risk_type,))
    conn.commit()

    for ticker in best_result['tickers']:
        quantity = int(best_result['quantities'][ticker])
        spot = float(prices_df[ticker].iloc[-1])
        cursor.execute("""
            INSERT INTO Portfolios (RISK_TYPE, TICKER, QUANTITY, MANAGER_ID, LAST_UPDATED, SPOT_PRICE)
            VALUES (?, ?, ?, ?, ?, ?)
        """, (risk_type, ticker, quantity, manager_id, datetime.now().strftime("%Y-%m-%d"), spot))

    cash_remaining = max_budget - best_result['total_cost']
    cursor.execute("""
        INSERT INTO Portfolios (RISK_TYPE, TICKER, QUANTITY, MANAGER_ID, LAST_UPDATED, SPOT_PRICE)
        VALUES (?, 'CASH', ?, ?, ?, 1)
    """, (risk_type, cash_remaining, manager_id, datetime.now().strftime("%Y-%m-%d")))

    # üîπ Deals
    for i, ticker in enumerate(best_result['tickers']):
        old_qty = initial_quantities[i]
        new_qty = best_result['quantities'][ticker]
        delta = int(new_qty - old_qty)
        if delta != 0:
            trade_type = 'Buy' if delta > 0 else 'Sell'
            cursor.execute("""
                INSERT INTO Deals (RISK_TYPE, TICKER, MANAGER_ID, TRADE_TYPE, QUANTITY, BUY_PRICE)
                VALUES (?, ?, ?, ?, ?, ?)
            """, (
                risk_type,
                ticker,
                manager_id,
                trade_type,
                abs(delta),
                float(prices_df[ticker].iloc[-1])
            ))

    conn.commit()
    conn.close()
    return best_result



result = strategie_montecarlo_robuste("Fund.db", "LOW_RISK", 300 , 7, 0.1)

result

